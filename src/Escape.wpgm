import wollok.game.*
import otros_obj.*
import menu.* //vacio por ahora
import obstaculos.*
import puerta.*

import direcciones.*
import personaje.*

import cofre.*

import frasco.*
import enemigo.*
import arma.*
import llave.*

program Game {
	
//	CONFIG	
	game.title("Juego")
	game.height(12)
	game.width(12)
	game.ground("concreto.png")
	
// Personaje	
	game.addVisual(personaje)
	
// Muros
	muro.cargar() //En lugar de cargar los muros de una, deberia cargar el nivel1, y que el nivel1 sea el responsable de
	//cargar los muros <!!>

// Puerta
	game.addVisualIn(new Puerta(nivelActual = 1),game.at(10,10)) //posicion siempre menor o igual a (height - 2) (width - 2) 



// "Mock Objects" - USADOS DE EJEMPLO PARA TESTEAR
	const pocion= new Frasco(efecto = 8)
	const veneno= new Frasco(efecto = -4)
	
	const palo= new Arma(mejoraAtk = 2,image = "palo.png" )
	const espada= new Arma(mejoraAtk = 3, image = "iron_sword.png")
	
	
	game.addVisualIn(pocion,game.at(3,3))
	game.addVisualIn(veneno,game.at(8,3)) 
	
	game.addVisualIn(palo,game.at(5,6))
	game.addVisualIn(espada,game.at(5,2))
	
	game.addVisualIn(new Llave(),game.at(7,2))
	game.addVisualIn(new Llave(),game.at(7,3))
	game.addVisualIn(new Llave(),game.at(7,4))
	 
	game.addVisualIn(new Cofre(),game.at(6,6))
	game.addVisualIn(new Cofre(),game.at(7,7))
	
	game.addVisualIn(new Enemigo(hp = 8, atk = 2), game.at(3,8)) //tira error porque no tiene definida posicion, pero despues se le define
	
	
// Colisiones 
	
	game.whenCollideDo(personaje,{objeto => objeto.colisionarCon(personaje)})
	//Los unicos obj. con los que puede colisionar son llaves o frascos.												
	
	
//Movimientos e interacciones 
	
		keyboard.up().onPressDo { personaje.mover(personaje.position().up(1),arriba) }
		keyboard.down().onPressDo { personaje.mover(personaje.position().down(1),abajo) }
		keyboard.left().onPressDo { personaje.mover(personaje.position().left(1),izquierda) }
		keyboard.right().onPressDo { personaje.mover(personaje.position().right(1),derecha) }
		keyboard.e().onPressDo{personaje.ataque()}
		keyboard.space().onPressDo{personaje.interactuar()} 
		//Interactuar significa:
		// - Abrir cofre segun la orientacion del personaje (abrir a la izquierda, a la derecha, etc)
		// - Atacar un enemigo segun orientacion
		// - Abrir puerta segun orientacion
		// LAS ARMAS NO SON COLISIONABLES Y SE INTERACTUA CON ELLAS (GT)
		
		//keyboard.x().onPressDo { unObjeto.avanzarFrame() } //super hack con lo de los ticks. TESTEAR
		keyboard.a().onPressDo { game.say(personaje,personaje.ataque().toString()) } //Para testings
		keyboard.v().onPressDo { game.say(personaje,personaje.vida().toString()) } //Para testings
		keyboard.l().onPressDo { game.say(personaje,personaje.llavesObtenidas().toString()) } //Para testings

///////visuales de menu
game.addVisualIn(new Corazon(),game.at(11,11))







// Inicio
	game.start()
	
	
}